name: Tests
on: [push, pull_request]

jobs:
  test:
    runs-on: self-hosted
    timeout-minutes: 45

    steps:
      - name: Cleanup workspace
        run: |
          rm -rf ${{ github.workspace }}/*
          rm -rf ${{ github.workspace }}/.* 2>/dev/null || true

      - uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Setup Docker permissions
        run: |
          # 检查当前用户是否在 docker 组中
          if ! groups $USER | grep -q docker; then
            echo "❌ User $USER is not in docker group"
            echo "Please run on your runner: sudo usermod -aG docker $USER"
            echo "Then restart the runner service: sudo systemctl restart actions.runner.*"
            exit 1
          fi

          # 验证 Docker 访问权限
          if ! docker ps >/dev/null 2>&1; then
            echo "❌ Cannot access Docker daemon"
            echo "Please ensure Docker is running and user has proper permissions"
            exit 1
          fi

          echo "✅ Docker permissions OK"

      - name: Start test environment
        run: |
          # 清理可能存在的容器和网络
          docker-compose -f docker-compose.test.yml down -v --remove-orphans 2>/dev/null || true
          docker system prune -f

          # 启动测试环境
          echo "Starting test environment..."
          docker-compose -f docker-compose.test.yml up -d

          # 等待所有服务健康
          echo "Waiting for services to be healthy..."
          timeout 300 bash -c '
            services="redis mysql postgres elasticsearch"
            for service in $services; do
              echo "Waiting for $service..."
              until docker-compose -f docker-compose.test.yml ps $service | grep -q "healthy\|Up"; do
                sleep 2
              done
              echo "$service is ready"
            done
          '

      - name: Verify services connectivity
        run: |
          echo "Verifying services are accessible from host..."

          # 验证端口是否可达（服务已通过端口映射暴露到宿主机）
          echo "Checking Redis (6379)..."
          timeout 30 bash -c 'until nc -z localhost 6379; do sleep 1; done'

          echo "Checking MySQL (3306)..."
          timeout 30 bash -c 'until nc -z localhost 3306; do sleep 1; done'

          echo "Checking PostgreSQL (5432)..."
          timeout 30 bash -c 'until nc -z localhost 5432; do sleep 1; done'

          echo "Checking Elasticsearch (9200)..."
          timeout 60 bash -c 'until nc -z localhost 9200; do sleep 2; done'

          # 验证服务实际可用
          echo "Testing service responses..."
          curl -f http://localhost:9200/_cluster/health || echo "Elasticsearch not ready yet, but port is open"

          echo "All service ports are accessible!"

      - name: Run unit tests
        run: ./gradlew test --parallel --continue
        timeout-minutes: 15

      - name: Run integration tests
        run: ./gradlew integrationTest --continue
        timeout-minutes: 20
        env:
          REDIS_URL: redis://localhost:6379
          MYSQL_URL: jdbc:mysql://localhost:3306/test_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
          POSTGRES_URL: jdbc:postgresql://localhost:5432/test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          ELASTICSEARCH_URL: http://localhost:9200

      - name: Publish test results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Test Results
          path: '**/build/test-results/**/*.xml'
          reporter: java-junit
          fail-on-error: true

      - name: Cleanup test environment
        if: always()
        run: |
          echo "Cleaning up test environment..."
          docker-compose -f docker-compose.test.yml down -v --remove-orphans
          docker system prune -f

      - name: Cleanup Gradle Cache
        if: always()
        run: |
          rm -f ~/.gradle/caches/modules-2/modules-2.lock
          rm -f ~/.gradle/caches/modules-2/gc.properties